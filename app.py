import joblib
import streamlit as st
import pandas as pd
import streamlit as st
import streamlit.components.v1 as components


def style_df(df):
    return df.style.applymap(lambda x: 'color: white;text-align:center')

# Inject HTML/CSS to change background color
background_color = """
    <style>
    .stApp {
        background-color: #3674B5;
        color: white;
    }
    .stButton {
        color: black;
    }
    .stColumn {
        color: white;
    }
    .stSlider label {
        color: white;
    }
    .caption {
        color: white;
    }
    .dataframe {
        color: white;
        border: 1px solid white;
        border-collapse: collapse;
    }
    .dataframe th, .dataframe td {
        border: 1px solid white; 
    }
    td {
       border: 1px solid white;
    }
    </style>
"""

# Use st.markdown to apply the background color
st.markdown(background_color, unsafe_allow_html=True)

# Text in first column
st.markdown("<div style='font-size:36px; font-weight:bold;text-align:center;'>M701D Series Gas Turbines</div>", unsafe_allow_html=True)
st.image('./pic/index_im01.jpg', caption='', use_column_width=True)
st.markdown("<div style='font-size:20px; font-weight:bold;'>Anomaly Detection for boiler feed pump system</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)

st.markdown("<div style='font-size:18px; font-weight:bold;color:#EDF4C2'>Data Scientist: Reza Pishva</div>", unsafe_allow_html=True)
st.markdown("<div style='font-size:18px; font-weight:bold;color:#EDF4C2'>Quality Assurance Engineer: Almas Baharlooie</div>", unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)


st.write("The CCW (Closed Circuit Water) system in the M701D Series Gas Turbines is a critical component for cooling and maintaining the efficiency of the turbine and data-driven techniques like clustering and anomaly detection can be incredibly beneficial for monitoring and maintaining the Closed Circuit Water (CCW) system in the M701D Series Gas Turbines")
st.write("Clustering algorithms group similar data points together, which can help in identifying patterns and trends within the CCW system. For example:")
st.markdown("<div style='font-size:18px; font-weight:bold;color:white'>Pattern Recognition:</div>", unsafe_allow_html=True)
st.write(" By clustering historical data, you can identify normal operational patterns and detect deviations from these patterns")
st.markdown("<div style='font-size:18px; font-weight:bold;color:white'>Predictive Maintenance:</div>", unsafe_allow_html=True)
st.write("Clustering can help predict potential failures by identifying unusual patterns that may indicate wear and tear or other issues.")
st.write("Anomaly detection techniques identify unusual or unexpected patterns in the data, which can be crucial for early fault detection and prevention. For instance:")
st.markdown("<div style='font-size:18px; font-weight:bold;color:white'>Early Fault Detection:</div>", unsafe_allow_html=True)
st.write("By continuously monitoring the CCW system, anomaly detection can quickly identify any deviations from normal operation, allowing for timely intervention")
st.markdown("<div style='font-size:18px; font-weight:bold;color:white'>Operational Efficiency:</div>", unsafe_allow_html=True)
st.write(" Detecting anomalies can help in maintaining the efficiency of the gas turbines by addressing issues before they escalate into major problems")
st.write("The model was trained using historical data, with careful tuning of parameters.")
st.markdown("<br>", unsafe_allow_html=True)
df2 = joblib.load('joblib/df.joblib')
st.markdown(
    """
    <style>
    .dataframe-container {
        margin-top:10px;
        height: 100px;
        weight: 80px;
        overflow-x: scroll;
    }
    </style>
    """,
    unsafe_allow_html=True)
st.markdown('<div class="dataframe-container">', unsafe_allow_html=True)
st.dataframe(df2)
st.markdown('</div>', unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

st.write("The features used to train the model are the following:")
st.write("1. GEN.INLET AIR TEMP.")
st.write("2. GEN.OUTLET AIR TEMP.")
st.write("3. C.W.INLET TEMP.")
st.write("4. C.W. OUTLET TEMP.")
st.write("5. C.W PUMP OUT LET PRESS")
st.write("6. C.W.INLET PRESSUR")
st.write("7. C.W OUT LET PRESS")

st.write(" The number of clusters was determined by simultaneously considering the Elbow method, Silhouette method, and silhouette score to achieve optimal performance in clustering models generated by different algorithms.")
st.write(" Anomaly detection was performed by taking majority votes into account. The votes do not hold the same value. The majority votes were utilized by incorporating the silhouette scores of each model as weights for each vote.")



col1, col2 = st.columns(2)
with col1:
    st.image('pic/elbow.png', caption='Elbow Method', use_column_width=True)
with col2:
    st.image('pic/silhouette.png', caption='Silhouette Method', use_column_width=True)  



st.write("You may select the value of each feature to determine whether the condition based on our selection is normal or abnormal:")
st.markdown(
    """
    <style>
    .stNumberInput .st-af {
        width: 150px;
        color: white;
    }
    .stSlider > div[role="slider"] {
        width: 150px; 
        color: white;
    }
    </style>
    """,
    unsafe_allow_html=True
)


# Setting the min and max values
input1 = st.slider('GEN.INLET AIR TEMP.', min_value=0, max_value=100, value=40)
input2 = st.slider('GEN.OUTLET AIR TEMP.', min_value=0, max_value=100, value=69)
input3 = st.slider('C.W.INLET TEMP.', min_value=0, max_value=100, value=37)
input4 = st.slider('C.W. OUTLET TEMP.', min_value=0, max_value=100, value=43)
input5 = st.slider('C.W PUMP OUT LET PRESS', min_value=0.0, max_value=10.0, value=4.9 , step=0.1)
input6 = st.slider('C.W.INLET PRESSUR', min_value=0.0, max_value=10.0, value=4.4 , step=0.1)
input7 = st.slider('C.W OUT LET PRESS', min_value=0.0, max_value=10.0, value=4.2 , step=0.1)

# Create a DataFrame with the input data
new_data = pd.DataFrame([{
    'GEN.INLET AIR TEMP.': input1,
    'GEN.OUTLET AIR TEMP.': input2, 
    'C.W.INLET TEMP.': input3, 
    'C.W. OUTLET TEMP.': input4, 
    'C.W PUMP OUT LET PRESS': input5,
    'C.W.INLET PRESSUR': input6,
    'C.W OUT LET PRESS': input7
}])
# Load the Agg. model, scaler, and clusters
scaler = joblib.load('joblib/scaler_ccw_agg.joblib')
clusters = joblib.load('joblib/clusters_ccw_agg.joblib')
knearest_model = joblib.load('joblib/model2_ccw_agg.joblib')
# Load the kmeans model, scaler, and clusters
scaler2 = joblib.load('joblib/scaler_ccw_kmeans.joblib')
clusters2 = joblib.load('joblib/clusters_ccw_kmeans.joblib')
knearest_model2 = joblib.load('joblib/model2_ccw_kmeans.joblib')
# Load the gaussion model, scaler, and clusters
scaler3 = joblib.load('joblib/scaler_ccw_gaussian.joblib')
clusters3 = joblib.load('joblib/clusters_ccw_gaussian.joblib')
gaussian_model3 = joblib.load('joblib/model2_ccw_gaussian.joblib')
# Load the spectral clustering model, scaler, and clusters
scaler4 = joblib.load('joblib/scaler_ccw_spectral.joblib')
clusters4 = joblib.load('joblib/clusters_ccw_spectral.joblib')
spectral_model4 = joblib.load('joblib/model2_ccw_spectral.joblib')
# Load the spectral clustering model, scaler, and clusters
scaler5 = joblib.load('joblib/scaler_ccw_affinity.joblib')
clusters5 = joblib.load('joblib/clusters_ccw_affinity.joblib')
affinity_model5 = joblib.load('joblib/model2_ccw_affinity.joblib')
df5 = joblib.load('joblib/df_ccw_affinity.joblib')
# Load the dbscan model, scaler, and clusters
scaler6 = joblib.load('joblib/scaler_ccw_dbscan.joblib')
clusters6 = joblib.load('joblib/clusters_ccw_dbscan.joblib')
knearest_model6 = joblib.load('joblib/model2_ccw_dbscan.joblib')
# Load the isolationforest. model, scaler, and clusters
scaler7 = joblib.load('joblib/scaler_ccw_iso.joblib')
clusters7 = joblib.load('joblib/clusters_ccw_iso.joblib')
knearest_model7 = joblib.load('joblib/model2_ccw_iso.joblib')
# Load the autoencoder model, scaler, and clusters
scaler8 = joblib.load('joblib/scaler_ccw_optics.joblib')
clusters8 = joblib.load('joblib/clusters_ccw_optics.joblib')
knearest_model8 = joblib.load('joblib/model2_ccw_optics.joblib')
# Load the birch. model, scaler, and clusters
scaler9 = joblib.load('joblib/scaler_ccw_birch.joblib')
clusters9 = joblib.load('joblib/clusters_ccw_birch.joblib')
knearest_model9= joblib.load('joblib/model2_ccw_birch.joblib')
# Load the lof. model, scaler, and clusters
scaler10 = joblib.load('joblib/scaler_ccw_lof.joblib')
clusters10 = joblib.load('joblib/clusters_ccw_lof.joblib')
knearest_model10= joblib.load('joblib/model2_ccw_lof.joblib')
# Load the one class svm. model, scaler, and clusters
scaler11 = joblib.load('joblib/scaler_ccw_svm.joblib')
clusters11 = joblib.load('joblib/clusters_ccw_svm.joblib')
knearest_model11= joblib.load('joblib/model2_ccw_svm.joblib')

# Scale the input data using the same scaler
scaled_data = scaler.transform(new_data)
scaled_data_kmeans = scaler2.transform(new_data)
scaled_data_gaussion = scaler3.transform(new_data)
scaled_data_spectral = scaler4.transform(new_data)
scaled_data_affinity = scaler5.transform(new_data)
scaled_data_dbscan = scaler6.transform(new_data)
scaled_data_iso= scaler7.transform(new_data)
scaled_data_optics= scaler8.transform(new_data)
scaled_data_birch= scaler9.transform(new_data)
scaled_data_lof= scaler10.transform(new_data)
scaled_data_svm= scaler11.transform(new_data)

# Find the nearest cluster
_, indices = knearest_model.kneighbors(scaled_data)
_, indices2 = knearest_model2.kneighbors(scaled_data)
_, indices3 = gaussian_model3.kneighbors(scaled_data)
_, indices4 = spectral_model4.kneighbors(scaled_data)
_, indices5 = affinity_model5.kneighbors(scaled_data)
_, indices6 = knearest_model6.kneighbors(scaled_data)
_, indices7 = knearest_model7.kneighbors(scaled_data)
_, indices8 = knearest_model8.kneighbors(scaled_data)
_, indices9 = knearest_model9.kneighbors(scaled_data)
_, indices10 = knearest_model10.kneighbors(scaled_data)
_, indices11 = knearest_model11.kneighbors(scaled_data)

predicted_cluster = clusters[indices[0][0]]
predicted_cluster2 = clusters2[indices2[0][0]]
predicted_cluster3 = clusters3[indices3[0][0]]
predicted_cluster4 = clusters4[indices4[0][0]]
predicted_cluster5 = clusters5[indices5[0][0]]
predicted_cluster6 = clusters6[indices6[0][0]]
predicted_cluster7 = clusters7[indices7[0][0]]
predicted_cluster8 = clusters8[indices8[0][0]]
predicted_cluster9 = clusters9[indices9[0][0]]
predicted_cluster10 = clusters10[indices10[0][0]]
predicted_cluster11 = clusters11[indices11[0][0]]
# Predict the cluster for the input data
agg =""
kmeans =""
gaussian =""
autoencoder =""
dbscan =""
isolationforest=""
spectral=""
affinity=""
iso=""
optics=""
birch=""
lof=""
svm=""
if st.button('Predict Cluster'):
    if (clusters[indices[0][0]]==0 or clusters[indices[0][0]]==1):
        agg = "Normal"      
    else:  
        agg = "Abnormal"       
    if (clusters2[indices2[0][0]]==0 or clusters2[indices2[0][0]]==1 or
        clusters2[indices2[0][0]]==2 or clusters2[indices2[0][0]]==4):
        kmeans = "Normal"
    else:
        kmeans = "Abnormal"
    if (clusters3[indices3[0][0]]==0 or clusters3[indices3[0][0]]==1 or 
        clusters3[indices3[0][0]]==3 or clusters3[indices3[0][0]]==5):
        gaussian = "Normal"
    else:
        gaussian = "Abnormal"  
    if (clusters4[indices4[0][0]]==0 or clusters4[indices4[0][0]]==2 or
        clusters4[indices4[0][0]]==7):
        spectral = "Normal"
    else:
        spectral = "Abnormal"      
    if (clusters5[indices5[0][0]]==1 or
        clusters5[indices5[0][0]]==6 or
        clusters5[indices5[0][0]]==8 or
        clusters5[indices5[0][0]]==38 or
        clusters5[indices5[0][0]]==75 or
        clusters5[indices5[0][0]]==10 or
        clusters5[indices5[0][0]]==63 or
        clusters5[indices5[0][0]]==25 or
        clusters5[indices5[0][0]]==28 or
        clusters5[indices5[0][0]]==40 or
        clusters5[indices5[0][0]]==68 or
        clusters5[indices5[0][0]]==0 or
        clusters5[indices5[0][0]]==5 or
        clusters5[indices5[0][0]]==50 or
        clusters5[indices5[0][0]]==9 or
        clusters5[indices5[0][0]]==27 or
        clusters5[indices5[0][0]]==21 or
        clusters5[indices5[0][0]]==35 or
        clusters5[indices5[0][0]]==20 or
        clusters5[indices5[0][0]]==22 or
        clusters5[indices5[0][0]]==23 or
        clusters5[indices5[0][0]]==24 or
        clusters5[indices5[0][0]]==18 or
        clusters5[indices5[0][0]]==52 or
        clusters5[indices5[0][0]]==54 or
        clusters5[indices5[0][0]]==16 or
        clusters5[indices5[0][0]]==15 or
        clusters5[indices5[0][0]]==49):
        affinity = "Abnormal"
    else:
        affinity = "Normal"   
    if (clusters6[indices6[0][0]]==-1 or clusters6[indices6[0][0]]==0 or 
        clusters6[indices6[0][0]]==3 or clusters6[indices6[0][0]]==4 or 
        clusters6[indices6[0][0]]==5):
        dbscan = "Abnormal"
    else:
        dbscan = "Normal"     
    if (clusters7[indices7[0][0]]==1):
        iso = "Normal"
    else:
        iso = "Abnormal" 
    if (clusters8[indices8[0][0]]==0 or clusters8[indices8[0][0]]==1):
        optics = "Normal"
    else:
        optics = "Abnormal"                      
    if (clusters9[indices9[0][0]]==1 or clusters9[indices9[0][0]]==7 or 
        clusters9[indices9[0][0]]==9):
        birch = "Abnormal"
    else:
        birch = "Normal"     
    if (clusters10[indices10[0][0]]==1):
        lof = "Normal"
    else:
        lof = "Abnormal" 
    if (clusters11[indices11[0][0]]==1):
        svm = "Normal"
    else:
        svm = "Abnormal"    



def get_color(value):
    if value == "Normal":
        return 'font-size:18px;font-weight: bold;color: yellow;'
    elif value == "Abnormal":
        return 'font-size:18px;font-weight: bold;color: red;'
    else:
        return ''


html_table = f"""
<table style="width:100%; border-collapse: collapse;color:white;border:1px solid white;">
  <tr>
    <th style="border: 1px solid white; padding: 8px;text-align:center;">#</td>
    <th style="border: 1px solid white; padding: 8px;">Clustering algorithm</th>
    <th style="border: 1px solid white; padding: 8px;text-align:center;">Result</th>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center;border:1px solid white;">1</td>
    <td style="border: 1px solid white; padding: 8px;border:1px solid white;">Agglomerative Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(agg)}">{agg}</td>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">2</td>
    <td style="border: 1px solid white; padding: 8px;">Kmeans Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(kmeans)}">{kmeans}</td>
  </tr>    
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">3</td>
    <td style="border: 1px solid white; padding: 8px;">Gaussian Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(gaussian)}">{gaussian}</td>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">4</td>
    <td style="border: 1px solid white; padding: 8px;">Spectral Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(spectral)}">{spectral}</td>
  </tr> 
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">5</td>
    <td style="border: 1px solid white; padding: 8px;">Affinity propagation</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(affinity)}">{affinity}</td>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">6</td>
    <td style="border: 1px solid white; padding: 8px;">DBSCAN Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(dbscan)}">{dbscan}</td>
  </tr>   
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">7</td>
    <td style="border: 1px solid white; padding: 8px;">Isolation forest Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(iso)}">{iso}</td>
  </tr>        
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">8</td>
    <td style="border: 1px solid white; padding: 8px;">Optics Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(optics)}">{optics}</td>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">9</td>
    <td style="border: 1px solid white; padding: 8px;">BIRCH Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(birch)}">{birch}</td>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">10</td>
    <td style="border: 1px solid white; padding: 8px;">Lof Clustering</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(lof)}">{lof}</td>
  </tr>
  <tr>
    <td style="border: 1px solid white; padding: 8px;text-align:center">11</td>
    <td style="border: 1px solid white; padding: 8px;">One-Class SVM</td>
    <td style="text-align:center;border: 1px solid white; padding: 8px;{get_color(svm)}">{svm}</td>
  </tr>                            
</table>
"""
# Use st.markdown to display the HTML table
st.markdown(html_table, unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)
st.write("In this section, I have detailed the hyperparameters that have been tuned and the clusters that have been selected.")
st.markdown("<div style='margin-top:50px;font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>Agglomerative clustering</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(agg)

data = {
    'Cluster': [0,1,2,3,4],
    'Count': [3353,2170,1,20,4]
}
df = pd.DataFrame(data)
styled_df = style_df(df)

col1, col2 = st.columns([2,1])
with col1:
  st.write("This model has been trained by 5548 instances.")
  st.write("In this model, five clusters have been established. Clusters 2, 3, and 4 have been designated as representing abnormal conditions, collectively comprising 0.45 percent of the dataset.")
  st.write("Average Silhouette Score: 0.5283754701280144")
  st.write("The clusters created using the training data are displayed here:")
with col2:
  st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-agg.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-agg.png', caption='Evaluation by Silhouette', use_column_width=True) 


st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>KMeans clustering</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(kmeans)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [0,1,2,3,4,5],
    'Count': [861,1190,365,927,837,1060]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5548 instances.")
    st.write("In this model, five clusters have been identified. Cluster 2 has been designated as representing abnormal conditions. Consequently, approximately 6.27 percent of the data points have been classified as abnormal.")
    st.write("Average Silhouette Score: 0.413153584837354")
    st.write("The clusters created using the training data are displayed here:")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)  

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-kmeans.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-kmeans.png', caption='Evaluation by Silhouette', use_column_width=True) 




st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>Gaussian Mixture Model</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(gaussian)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [0,1,2,3,4,5],
    'Count': [709,2226,282,1216,193,614]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("In this model, a total of five clusters have been identified. Among them, Clusters 2 and 4 have been designated as representing abnormal conditions. As a result, 8.56 percent of the instances have been classified as abnormal data points.")
    st.write("Average Silhouette Score: 0.152732874781018")
    st.write("The clusters created using the training data are displayed here:")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-gaussian.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-gaussian.png', caption='Evaluation by Silhouette', use_column_width=True) 


st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>Spectral Clustering</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(spectral)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
 'Cluster': [-1, 0, 1, 2, 3, 4, 5 ,6],
 'Count': [1386,202,1658,104,440,14,152,1284]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("In this model, eight clusters have been identified. Clusters 0,2,5,6 have been designated as representing an abnormal condition. Consequently, 8.5 percent of the instances have been classified as abnormal data.")
    st.write("Average Silhouette Score: 0.3332918979732314")
    st.write("The clusters created using the training data are displayed here:")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-spectral.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-spectral.png', caption='Evaluation by Silhouette', use_column_width=True) 


st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>Affinity propagation</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(affinity)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("Average Silhouette Score: 0.30728965710248635")
with col2:

    st.markdown(
    """
    <style>
    .dataframe-container {
        margin-top:-150px;
        height: 100px;
        overflow-y: scroll;
    }
    </style>
    """,
    unsafe_allow_html=True)
    st.markdown('<div class="dataframe-container">', unsafe_allow_html=True)
    st.dataframe(df5)
    st.markdown('</div>', unsafe_allow_html=True)

st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>DBSCAN</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(dbscan)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [-1,0,1,2,3,4,5,6],
    'Count': [44,200,2922,1813,8,38,102,113]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained with 5240 instances. In this model, two clusters have been identified. Cluster -1,0,3,4,5,6 have been designated as representing the abnormal condition. Consequently, 9.63 percent of the instances have been classified as abnormal data.")    
    st.write("Best Parameters: eps=1.0, min_samples=5")
    st.write("Average Silhouette Score: 0.32329093733063174")
    st.write("The clusters created using the training data are displayed here:")    
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-dbscan.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-dbscan.png', caption='Evaluation by Silhouette', use_column_width=True)     


st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>Isolation forest Clustering</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(spectral)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [-1, 1],
    'Count': [420,4820]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("In this model, two clusters have been identified. Cluster -1 has been designated as representing the abnormal condition. Consequently, 8.01 percent of the instances have been classified as abnormal data.")
    st.write("Average Silhouette Score: 0.3979264306615179")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-isolationforest.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-isolationforest.png', caption='Evaluation by Silhouette', use_column_width=True)     


st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>OPTICS</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(optics)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [-1, 0 ,1],
    'Count': [500,1815,2925]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("In this model, I have defined 3 clusters. Cluster -1 has been identified as an abnormal condition. As a result, 10.5 percent of the instances have been classified as abnormal data.")
    st.write("Best Parameters: min_samples=9, xi=0.060000000000000005")
    st.write("Average Silhouette Score: 0.29186307270218864")

    st.write("This model has been trained by 5240 instances.")
    st.write("In this model I have chosen 2 clusters and cluster 1 has been selected as abnormal condition.In this model I have considered 10.5 percent of instences as abnormal data.")
    st.write("As you can see Average Silhouette Score is equal to 0.29.")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-optics.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-optics.png', caption='Evaluation by Silhouette', use_column_width=True)   

st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>BIRCH</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(birch)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [0,1,2,3,4,5,6,7,8,9,10],
    'Count': [163,1996,194,5,9,5,102,1437,1,1327,1]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("In this model, four clusters have been established. Clusters 1,7 and 9 have been designated as representing normal conditions. As a result, 9.16 percent of the instances have been classified as abnormal data.")
    st.write("Average Silhouette Score: 0.340891129318577")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-birch.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-birch.png', caption='Evaluation by Silhouette', use_column_width=True)  



st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>LOF</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(lof)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [-1,1],
    'Count': [420,4820]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("This model has defined two clusters, with Cluster -1 being identified as the abnormal condition. Consequently, 8 percent of the instances are classified as abnormal data.")
    st.write("Average Silhouette Score: 0.1789845850654112")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-lof.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-lof.png', caption='Evaluation by Silhouette', use_column_width=True)  



st.markdown("<div style='font-size:24px;color:white;font-weight:bold;height:40px;background-color:#7886C7;border-radius:5px;text-align:center'>One-Class SVM</div>", unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)
st.write(svm)
st.write(
    """
    <style>
    .dataframe th, .dataframe td {
        text-align: center;

    }
    </style>
    """,
    unsafe_allow_html=True
)
data = {
    'Cluster': [-1,1],
    'Count': [418,4822]
}
df = pd.DataFrame(data)
styled_df = style_df(df)
col1, col2 = st.columns([2,1])
with col1:
    st.write("This model has been trained by 5240 instances.")
    st.write("In this model, two clusters have been identified. Cluster -1 has been designated as representing the abnormal condition. Consequently,8 percent of the instances have been classified as abnormal data.")
    st.write("Average Silhouette Score: 0.1789845850654112")
with col2:
    st.write(styled_df.to_html(escape=False), unsafe_allow_html=True)

st.markdown("<br>", unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    st.image('pic/pca-svm.png', caption='Data distribution', use_column_width=True)
with col2:
    st.image('pic/sil-svm.png', caption='Evaluation by Silhouette', use_column_width=True)        


    

  
